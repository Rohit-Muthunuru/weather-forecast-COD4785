//create a weather forecast app
//<--------------index.js------------------>
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

//<-------------------------App.js----------------------------->
import React from 'react';
   import Student from './Student';

   const App = () => {
     return (
       <div>
         <h1>Weather App</h1>
         <Student />
       </div>
     );
   };

   export default App;


//<---------------------------------------Student.js--------------------------------->
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './Weather.css';

const Student = () => {
  const [weatherData, setWeatherData] = useState(null);
  const [city, setCity] = useState('');
  const [currentDateTime, setCurrentDateTime] = useState('');

  const apiKey = 'db9c3807b51d6d5f6c1c94cce6903b7c';

  useEffect(() => {
    updateDateTime();
  }, []);

  const updateDateTime = () => {
    const now = new Date();
    const options = {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric',
      second: 'numeric',
      timeZoneName: 'short',
    };
    setCurrentDateTime(now.toLocaleDateString('en-US', options));
  };

  const getWeather = async () => {
    try {
      const response = await axios.get(
        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`
      );
      setWeatherData(response.data);
      updateDateTime();
    } catch (error) {
      console.error('Error fetching weather data:', error);
    }
  };

  return (
    <div className="weather-container">
      <div className="input-container">
        <input
          type="text"
          placeholder="Enter city"
          value={city}
          onChange={(e) => setCity(e.target.value)}
          className="input-field"
        />
        <button onClick={getWeather} className="get-weather-btn">
          Get Weather
        </button>
      </div>

      {weatherData && (
        <div className="weather-details">
          <h2>{weatherData.name}</h2>
          <p>Temperature: {weatherData.main.temp}Â°C</p>
        </div>
      )}

      <div className="date-time-container">
        <p>{currentDateTime}</p>
      </div>
    </div>
  );
};

export default Student; 




//<---------------------------------Weather.css----------------------------------->
body {
    margin: 0;
    padding: 0;
    font-family: 'Arial', sans-serif;
    background: url('weather.jpg') center/cover no-repeat fixed;
    height: 100vh;
    display: flex;
    align-items:top;
    justify-content: center;
  }

  .weather-container {
    text-align: center;
    background: rgba(255, 255, 255, 0.8);
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
  }
  
  .input-container {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 20px;
  }
  
  .input-field {
    padding: 10px;
    margin-right: 10px;
  }
  
  .get-weather-btn {
    padding: 10px;
    background-color: #4caf50;
    color: white;
    border: none;
    cursor: pointer;
  }
  
  .weather-details {
    margin-top: 20px;
  }
  
  .date-time-container {
    margin-top: 20px;
    font-size: 14px;
  }
  
 
